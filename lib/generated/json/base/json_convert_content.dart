// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:investigators/models/address_model.dart';
import 'package:investigators/models/ali_oss_access_data.dart';
import 'package:investigators/models/appointment_pending_list.dart';
import 'package:investigators/models/interview_detail_info.dart';
import 'package:investigators/models/interview_pending_list.dart';
import 'package:investigators/models/returned_list.dart';
import 'package:investigators/models/sign_history_model.dart';
import 'package:investigators/models/subcategory.dart';
import 'package:investigators/models/user_model.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError('$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AddressModel>[] is M) {
      return data.map<AddressModel>((Map<String, dynamic> e) => AddressModel.fromJson(e)).toList() as M;
    }
    if (<AliOssAccessData>[] is M) {
      return data.map<AliOssAccessData>((Map<String, dynamic> e) => AliOssAccessData.fromJson(e)).toList() as M;
    }
    if (<AppointmentPendingList>[] is M) {
      return data.map<AppointmentPendingList>((Map<String, dynamic> e) => AppointmentPendingList.fromJson(e)).toList() as M;
    }
    if (<AppointmentPendingListData>[] is M) {
      return data.map<AppointmentPendingListData>((Map<String, dynamic> e) => AppointmentPendingListData.fromJson(e)).toList() as M;
    }
    if (<AppointmentPendingListDataIdentityInfo>[] is M) {
      return data.map<AppointmentPendingListDataIdentityInfo>((Map<String, dynamic> e) => AppointmentPendingListDataIdentityInfo.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfo>[] is M) {
      return data.map<InterviewDetailInfo>((Map<String, dynamic> e) => InterviewDetailInfo.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoInterviewInfo>[] is M) {
      return data.map<InterviewDetailInfoInterviewInfo>((Map<String, dynamic> e) => InterviewDetailInfoInterviewInfo.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoInterviewInfoAddress>[] is M) {
      return data.map<InterviewDetailInfoInterviewInfoAddress>((Map<String, dynamic> e) => InterviewDetailInfoInterviewInfoAddress.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoInterviewInfoAsset>[] is M) {
      return data.map<InterviewDetailInfoInterviewInfoAsset>((Map<String, dynamic> e) => InterviewDetailInfoInterviewInfoAsset.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoInterviewInfoAssetMonthlyIncome>[] is M) {
      return data.map<InterviewDetailInfoInterviewInfoAssetMonthlyIncome>((Map<String, dynamic> e) => InterviewDetailInfoInterviewInfoAssetMonthlyIncome.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoInterviewInfoAssetLastMonthTransactionFlow>[] is M) {
      return data.map<InterviewDetailInfoInterviewInfoAssetLastMonthTransactionFlow>((Map<String, dynamic> e) =>
          InterviewDetailInfoInterviewInfoAssetLastMonthTransactionFlow.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoInterviewInfoAssetInvestmentCertificate>[] is M) {
      return data.map<InterviewDetailInfoInterviewInfoAssetInvestmentCertificate>((Map<String, dynamic> e) =>
          InterviewDetailInfoInterviewInfoAssetInvestmentCertificate.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoInterviewInfoAssetProofOfEmployment>[] is M) {
      return data.map<InterviewDetailInfoInterviewInfoAssetProofOfEmployment>((Map<String, dynamic> e) => InterviewDetailInfoInterviewInfoAssetProofOfEmployment.fromJson(e))
          .toList() as M;
    }
    if (<InterviewDetailInfoInterviewInfoAssetOtherAssets>[] is M) {
      return data.map<InterviewDetailInfoInterviewInfoAssetOtherAssets>((Map<String, dynamic> e) => InterviewDetailInfoInterviewInfoAssetOtherAssets.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoInterviewInfoAssetLandOwnership>[] is M) {
      return data.map<InterviewDetailInfoInterviewInfoAssetLandOwnership>((Map<String, dynamic> e) => InterviewDetailInfoInterviewInfoAssetLandOwnership.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoInterviewInfoAssetHouseOwnership>[] is M) {
      return data.map<InterviewDetailInfoInterviewInfoAssetHouseOwnership>((Map<String, dynamic> e) => InterviewDetailInfoInterviewInfoAssetHouseOwnership.fromJson(e))
          .toList() as M;
    }
    if (<InterviewDetailInfoInterviewInfoAssetShopAssets>[] is M) {
      return data.map<InterviewDetailInfoInterviewInfoAssetShopAssets>((Map<String, dynamic> e) => InterviewDetailInfoInterviewInfoAssetShopAssets.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoInterviewInfoAssetLivestockAssets>[] is M) {
      return data.map<InterviewDetailInfoInterviewInfoAssetLivestockAssets>((Map<String, dynamic> e) => InterviewDetailInfoInterviewInfoAssetLivestockAssets.fromJson(e))
          .toList() as M;
    }
    if (<InterviewDetailInfoInterviewInfoAssetMotorVehicles>[] is M) {
      return data.map<InterviewDetailInfoInterviewInfoAssetMotorVehicles>((Map<String, dynamic> e) => InterviewDetailInfoInterviewInfoAssetMotorVehicles.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoInterviewInfoAccount>[] is M) {
      return data.map<InterviewDetailInfoInterviewInfoAccount>((Map<String, dynamic> e) => InterviewDetailInfoInterviewInfoAccount.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoClientInfo>[] is M) {
      return data.map<InterviewDetailInfoClientInfo>((Map<String, dynamic> e) => InterviewDetailInfoClientInfo.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoClientInfoCredit>[] is M) {
      return data.map<InterviewDetailInfoClientInfoCredit>((Map<String, dynamic> e) => InterviewDetailInfoClientInfoCredit.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoClientInfoPhotos>[] is M) {
      return data.map<InterviewDetailInfoClientInfoPhotos>((Map<String, dynamic> e) => InterviewDetailInfoClientInfoPhotos.fromJson(e)).toList() as M;
    }
    if (<InterviewDetailInfoClientInfoBaseInfo>[] is M) {
      return data.map<InterviewDetailInfoClientInfoBaseInfo>((Map<String, dynamic> e) => InterviewDetailInfoClientInfoBaseInfo.fromJson(e)).toList() as M;
    }
    if (<InterviewPendingList>[] is M) {
      return data.map<InterviewPendingList>((Map<String, dynamic> e) => InterviewPendingList.fromJson(e)).toList() as M;
    }
    if (<InterviewPendingListData>[] is M) {
      return data.map<InterviewPendingListData>((Map<String, dynamic> e) => InterviewPendingListData.fromJson(e)).toList() as M;
    }
    if (<InterviewPendingListDataIdentityInfo>[] is M) {
      return data.map<InterviewPendingListDataIdentityInfo>((Map<String, dynamic> e) => InterviewPendingListDataIdentityInfo.fromJson(e)).toList() as M;
    }
    if (<ReturnedList>[] is M) {
      return data.map<ReturnedList>((Map<String, dynamic> e) => ReturnedList.fromJson(e)).toList() as M;
    }
    if (<ReturnedListData>[] is M) {
      return data.map<ReturnedListData>((Map<String, dynamic> e) => ReturnedListData.fromJson(e)).toList() as M;
    }
    if (<ReturnedListDataIdentityInfo>[] is M) {
      return data.map<ReturnedListDataIdentityInfo>((Map<String, dynamic> e) => ReturnedListDataIdentityInfo.fromJson(e)).toList() as M;
    }
    if (<SignHistoryModel>[] is M) {
      return data.map<SignHistoryModel>((Map<String, dynamic> e) => SignHistoryModel.fromJson(e)).toList() as M;
    }
    if (<Subcategory>[] is M) {
      return data.map<Subcategory>((Map<String, dynamic> e) => Subcategory.fromJson(e)).toList() as M;
    }
    if (<UserModel>[] is M) {
      return data.map<UserModel>((Map<String, dynamic> e) => UserModel.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AddressModel).toString(): AddressModel.fromJson,
    (AliOssAccessData).toString(): AliOssAccessData.fromJson,
    (AppointmentPendingList).toString(): AppointmentPendingList.fromJson,
    (AppointmentPendingListData).toString(): AppointmentPendingListData.fromJson,
    (AppointmentPendingListDataIdentityInfo).toString(): AppointmentPendingListDataIdentityInfo.fromJson,
    (InterviewDetailInfo).toString(): InterviewDetailInfo.fromJson,
    (InterviewDetailInfoInterviewInfo).toString(): InterviewDetailInfoInterviewInfo.fromJson,
    (InterviewDetailInfoInterviewInfoAddress).toString(): InterviewDetailInfoInterviewInfoAddress.fromJson,
    (InterviewDetailInfoInterviewInfoAsset).toString(): InterviewDetailInfoInterviewInfoAsset.fromJson,
    (InterviewDetailInfoInterviewInfoAssetMonthlyIncome).toString(): InterviewDetailInfoInterviewInfoAssetMonthlyIncome.fromJson,
    (InterviewDetailInfoInterviewInfoAssetLastMonthTransactionFlow).toString(): InterviewDetailInfoInterviewInfoAssetLastMonthTransactionFlow.fromJson,
    (InterviewDetailInfoInterviewInfoAssetInvestmentCertificate).toString(): InterviewDetailInfoInterviewInfoAssetInvestmentCertificate.fromJson,
    (InterviewDetailInfoInterviewInfoAssetProofOfEmployment).toString(): InterviewDetailInfoInterviewInfoAssetProofOfEmployment.fromJson,
    (InterviewDetailInfoInterviewInfoAssetOtherAssets).toString(): InterviewDetailInfoInterviewInfoAssetOtherAssets.fromJson,
    (InterviewDetailInfoInterviewInfoAssetLandOwnership).toString(): InterviewDetailInfoInterviewInfoAssetLandOwnership.fromJson,
    (InterviewDetailInfoInterviewInfoAssetHouseOwnership).toString(): InterviewDetailInfoInterviewInfoAssetHouseOwnership.fromJson,
    (InterviewDetailInfoInterviewInfoAssetShopAssets).toString(): InterviewDetailInfoInterviewInfoAssetShopAssets.fromJson,
    (InterviewDetailInfoInterviewInfoAssetLivestockAssets).toString(): InterviewDetailInfoInterviewInfoAssetLivestockAssets.fromJson,
    (InterviewDetailInfoInterviewInfoAssetMotorVehicles).toString(): InterviewDetailInfoInterviewInfoAssetMotorVehicles.fromJson,
    (InterviewDetailInfoInterviewInfoAccount).toString(): InterviewDetailInfoInterviewInfoAccount.fromJson,
    (InterviewDetailInfoClientInfo).toString(): InterviewDetailInfoClientInfo.fromJson,
    (InterviewDetailInfoClientInfoCredit).toString(): InterviewDetailInfoClientInfoCredit.fromJson,
    (InterviewDetailInfoClientInfoPhotos).toString(): InterviewDetailInfoClientInfoPhotos.fromJson,
    (InterviewDetailInfoClientInfoBaseInfo).toString(): InterviewDetailInfoClientInfoBaseInfo.fromJson,
    (InterviewPendingList).toString(): InterviewPendingList.fromJson,
    (InterviewPendingListData).toString(): InterviewPendingListData.fromJson,
    (InterviewPendingListDataIdentityInfo).toString(): InterviewPendingListDataIdentityInfo.fromJson,
    (ReturnedList).toString(): ReturnedList.fromJson,
    (ReturnedListData).toString(): ReturnedListData.fromJson,
    (ReturnedListDataIdentityInfo).toString(): ReturnedListDataIdentityInfo.fromJson,
    (SignHistoryModel).toString(): SignHistoryModel.fromJson,
    (Subcategory).toString(): Subcategory.fromJson,
    (UserModel).toString(): UserModel.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}